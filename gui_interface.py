# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'gui_interface.ui'
#
# Created by: PyQt5 UI code generator 5.9.1
#
# WARNING! All changes made in this file will be lost!

from PyQt5 import QtCore, QtGui, QtWidgets

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1244, 740)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setMinimumSize(QtCore.QSize(1046, 0))
        self.centralwidget.setObjectName("centralwidget")
        self.log_window = QtWidgets.QTextEdit(self.centralwidget)
        self.log_window.setGeometry(QtCore.QRect(1010, 30, 221, 281))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(10)
        self.log_window.setFont(font)
        self.log_window.setAutoFillBackground(False)
        self.log_window.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        self.log_window.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        self.log_window.setObjectName("log_window")
        self.Start_Scan = QtWidgets.QPushButton(self.centralwidget)
        self.Start_Scan.setGeometry(QtCore.QRect(1010, 500, 100, 31))
        self.Start_Scan.setObjectName("Start_Scan")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(10, 20, 121, 21))
        self.label.setObjectName("label")
        self.input_file = QtWidgets.QTextEdit(self.centralwidget)
        self.input_file.setGeometry(QtCore.QRect(130, 4, 341, 51))
        self.input_file.setLineWrapMode(QtWidgets.QTextEdit.NoWrap)
        self.input_file.setObjectName("input_file")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(10, 70, 121, 21))
        self.label_2.setObjectName("label_2")
        self.output_file = QtWidgets.QTextEdit(self.centralwidget)
        self.output_file.setGeometry(QtCore.QRect(130, 60, 341, 51))
        self.output_file.setLineWrapMode(QtWidgets.QTextEdit.NoWrap)
        self.output_file.setObjectName("output_file")
        self.DNA_button = QtWidgets.QRadioButton(self.centralwidget)
        self.DNA_button.setGeometry(QtCore.QRect(10, 120, 61, 31))
        self.DNA_button.setChecked(True)
        self.DNA_button.setObjectName("DNA_button")
        self.RNA_button = QtWidgets.QRadioButton(self.centralwidget)
        self.RNA_button.setGeometry(QtCore.QRect(130, 120, 82, 31))
        self.RNA_button.setObjectName("RNA_button")
        self.Protein_button = QtWidgets.QRadioButton(self.centralwidget)
        self.Protein_button.setGeometry(QtCore.QRect(250, 120, 82, 31))
        self.Protein_button.setObjectName("Protein_button")
        self.PrimerFlag = QtWidgets.QCheckBox(self.centralwidget)
        self.PrimerFlag.setGeometry(QtCore.QRect(390, 120, 131, 31))
        self.PrimerFlag.setObjectName("PrimerFlag")
        self.output_format = QtWidgets.QListWidget(self.centralwidget)
        self.output_format.setGeometry(QtCore.QRect(1010, 350, 221, 91))
        self.output_format.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.output_format.setObjectName("output_format")
        item = QtWidgets.QListWidgetItem()
        self.output_format.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.output_format.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.output_format.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.output_format.addItem(item)
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(10, 160, 391, 41))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(10, 196, 391, 41))
        self.label_4.setObjectName("label_4")
        self.fsc_string = QtWidgets.QTextBrowser(self.centralwidget)
        self.fsc_string.setGeometry(QtCore.QRect(400, 272, 111, 31))
        self.fsc_string.setAcceptDrops(True)
        self.fsc_string.setReadOnly(False)
        self.fsc_string.setObjectName("fsc_string")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(10, 231, 391, 41))
        self.label_5.setObjectName("label_5")
        self.misa_string = QtWidgets.QTextBrowser(self.centralwidget)
        self.misa_string.setGeometry(QtCore.QRect(400, 236, 111, 31))
        self.misa_string.setAcceptDrops(True)
        self.misa_string.setReadOnly(False)
        self.misa_string.setObjectName("misa_string")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(10, 270, 391, 41))
        self.label_6.setObjectName("label_6")
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(-20, 109, 541, 20))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.line_2 = QtWidgets.QFrame(self.centralwidget)
        self.line_2.setGeometry(QtCore.QRect(-10, 145, 531, 20))
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.line_3 = QtWidgets.QFrame(self.centralwidget)
        self.line_3.setGeometry(QtCore.QRect(0, 336, 521, 20))
        self.line_3.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_3.setObjectName("line_3")
        self.line_4 = QtWidgets.QFrame(self.centralwidget)
        self.line_4.setGeometry(QtCore.QRect(510, 5, 20, 671))
        self.line_4.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_4.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_4.setObjectName("line_4")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(10, 340, 201, 31))
        self.label_7.setToolTip("")
        self.label_7.setObjectName("label_7")
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(10, 364, 391, 31))
        self.label_8.setObjectName("label_8")
        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        self.label_9.setGeometry(QtCore.QRect(10, 393, 391, 31))
        self.label_9.setObjectName("label_9")
        self.min_perfection = QtWidgets.QSpinBox(self.centralwidget)
        self.min_perfection.setGeometry(QtCore.QRect(400, 396, 111, 22))
        self.min_perfection.setMaximum(999999)
        self.min_perfection.setProperty("value", 50)
        self.min_perfection.setObjectName("min_perfection")
        self.strict_flag = QtWidgets.QCheckBox(self.centralwidget)
        self.strict_flag.setGeometry(QtCore.QRect(10, 496, 421, 41))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.strict_flag.setFont(font)
        self.strict_flag.setObjectName("strict_flag")
        self.sshow_flag = QtWidgets.QCheckBox(self.centralwidget)
        self.sshow_flag.setGeometry(QtCore.QRect(10, 520, 421, 41))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.sshow_flag.setFont(font)
        self.sshow_flag.setObjectName("sshow_flag")
        self.label_10 = QtWidgets.QLabel(self.centralwidget)
        self.label_10.setGeometry(QtCore.QRect(10, 423, 391, 31))
        self.label_10.setStatusTip("")
        self.label_10.setObjectName("label_10")
        self.missmatch_open = QtWidgets.QSpinBox(self.centralwidget)
        self.missmatch_open.setGeometry(QtCore.QRect(400, 423, 111, 22))
        self.missmatch_open.setProperty("value", 2)
        self.missmatch_open.setObjectName("missmatch_open")
        self.label_11 = QtWidgets.QLabel(self.centralwidget)
        self.label_11.setGeometry(QtCore.QRect(10, 449, 391, 31))
        self.label_11.setObjectName("label_11")
        self.non_seed_strat_penalty = QtWidgets.QSpinBox(self.centralwidget)
        self.non_seed_strat_penalty.setGeometry(QtCore.QRect(400, 449, 111, 22))
        self.non_seed_strat_penalty.setProperty("value", 3)
        self.non_seed_strat_penalty.setObjectName("non_seed_strat_penalty")
        self.missmatch_extension_penalty = QtWidgets.QSpinBox(self.centralwidget)
        self.missmatch_extension_penalty.setGeometry(QtCore.QRect(400, 476, 111, 22))
        self.missmatch_extension_penalty.setProperty("value", 1)
        self.missmatch_extension_penalty.setObjectName("missmatch_extension_penalty")
        self.label_12 = QtWidgets.QLabel(self.centralwidget)
        self.label_12.setGeometry(QtCore.QRect(10, 474, 391, 31))
        self.label_12.setStatusTip("")
        self.label_12.setObjectName("label_12")
        self.line_6 = QtWidgets.QFrame(self.centralwidget)
        self.line_6.setGeometry(QtCore.QRect(-10, 546, 531, 20))
        self.line_6.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_6.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_6.setObjectName("line_6")
        self.default_eng = QtWidgets.QCheckBox(self.centralwidget)
        self.default_eng.setGeometry(QtCore.QRect(10, 576, 441, 41))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.default_eng.setFont(font)
        self.default_eng.setChecked(True)
        self.default_eng.setObjectName("default_eng")
        self.accurate_eng = QtWidgets.QCheckBox(self.centralwidget)
        self.accurate_eng.setGeometry(QtCore.QRect(10, 550, 511, 41))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.accurate_eng.setFont(font)
        self.accurate_eng.setObjectName("accurate_eng")
        self.dict_mode = QtWidgets.QCheckBox(self.centralwidget)
        self.dict_mode.setGeometry(QtCore.QRect(10, 609, 219, 41))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.dict_mode.setFont(font)
        self.dict_mode.setObjectName("dict_mode")
        self.dict_string = QtWidgets.QTextBrowser(self.centralwidget)
        self.dict_string.setGeometry(QtCore.QRect(230, 610, 241, 51))
        self.dict_string.setReadOnly(False)
        self.dict_string.setObjectName("dict_string")
        self.line_7 = QtWidgets.QFrame(self.centralwidget)
        self.line_7.setGeometry(QtCore.QRect(441, 171, 20, 20))
        self.line_7.setMaximumSize(QtCore.QSize(21, 16777215))
        self.line_7.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_7.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_7.setObjectName("line_7")
        self.line_8 = QtWidgets.QFrame(self.centralwidget)
        self.line_8.setGeometry(QtCore.QRect(380, 206, 21, 20))
        self.line_8.setMaximumSize(QtCore.QSize(21, 16777215))
        self.line_8.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_8.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_8.setObjectName("line_8")
        self.line_9 = QtWidgets.QFrame(self.centralwidget)
        self.line_9.setGeometry(QtCore.QRect(380, 241, 20, 20))
        self.line_9.setMaximumSize(QtCore.QSize(21, 16777215))
        self.line_9.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_9.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_9.setObjectName("line_9")
        self.line_10 = QtWidgets.QFrame(self.centralwidget)
        self.line_10.setGeometry(QtCore.QRect(370, 216, 20, 35))
        self.line_10.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_10.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_10.setObjectName("line_10")
        self.left_flanking_flag = QtWidgets.QCheckBox(self.centralwidget)
        self.left_flanking_flag.setGeometry(QtCore.QRect(540, 20, 311, 31))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.left_flanking_flag.setFont(font)
        self.left_flanking_flag.setChecked(True)
        self.left_flanking_flag.setObjectName("left_flanking_flag")
        self.right_flanking_flag = QtWidgets.QCheckBox(self.centralwidget)
        self.right_flanking_flag.setGeometry(QtCore.QRect(540, 45, 311, 31))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.right_flanking_flag.setFont(font)
        self.right_flanking_flag.setChecked(True)
        self.right_flanking_flag.setObjectName("right_flanking_flag")
        self.rev_comp_flag = QtWidgets.QCheckBox(self.centralwidget)
        self.rev_comp_flag.setGeometry(QtCore.QRect(540, 68, 371, 31))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.rev_comp_flag.setFont(font)
        self.rev_comp_flag.setObjectName("rev_comp_flag")
        self.stat_flag = QtWidgets.QCheckBox(self.centralwidget)
        self.stat_flag.setGeometry(QtCore.QRect(540, 90, 441, 31))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.stat_flag.setFont(font)
        self.stat_flag.setObjectName("stat_flag")
        self.show_console = QtWidgets.QCheckBox(self.centralwidget)
        self.show_console.setGeometry(QtCore.QRect(540, 110, 451, 31))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.show_console.setFont(font)
        self.show_console.setChecked(True)
        self.show_console.setObjectName("show_console")
        self.line_11 = QtWidgets.QFrame(self.centralwidget)
        self.line_11.setGeometry(QtCore.QRect(520, 160, 481, 20))
        self.line_11.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_11.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_11.setObjectName("line_11")
        self.line_12 = QtWidgets.QFrame(self.centralwidget)
        self.line_12.setGeometry(QtCore.QRect(990, 0, 20, 681))
        self.line_12.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_12.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_12.setObjectName("line_12")
        self.label_13 = QtWidgets.QLabel(self.centralwidget)
        self.label_13.setGeometry(QtCore.QRect(530, 185, 181, 41))
        self.label_13.setObjectName("label_13")
        self.motif_type = QtWidgets.QListWidget(self.centralwidget)
        self.motif_type.setGeometry(QtCore.QRect(680, 180, 301, 51))
        self.motif_type.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
        self.motif_type.setAcceptDrops(False)
        self.motif_type.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.motif_type.setObjectName("motif_type")
        item = QtWidgets.QListWidgetItem()
        self.motif_type.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.motif_type.addItem(item)
        self.line_13 = QtWidgets.QFrame(self.centralwidget)
        self.line_13.setGeometry(QtCore.QRect(520, 227, 482, 20))
        self.line_13.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_13.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_13.setObjectName("line_13")
        self.label_14 = QtWidgets.QLabel(self.centralwidget)
        self.label_14.setGeometry(QtCore.QRect(530, 315, 311, 31))
        self.label_14.setObjectName("label_14")
        self.prm_range = QtWidgets.QTextBrowser(self.centralwidget)
        self.prm_range.setGeometry(QtCore.QRect(910, 321, 71, 25))
        self.prm_range.setReadOnly(False)
        self.prm_range.setObjectName("prm_range")
        self.label_15 = QtWidgets.QLabel(self.centralwidget)
        self.label_15.setGeometry(QtCore.QRect(530, 240, 121, 21))
        self.label_15.setObjectName("label_15")
        self.label_16 = QtWidgets.QLabel(self.centralwidget)
        self.label_16.setGeometry(QtCore.QRect(530, 260, 151, 51))
        self.label_16.setObjectName("label_16")
        self.prm_opt_size = QtWidgets.QTextBrowser(self.centralwidget)
        self.prm_opt_size.setGeometry(QtCore.QRect(910, 343, 71, 25))
        self.prm_opt_size.setReadOnly(False)
        self.prm_opt_size.setObjectName("prm_opt_size")
        self.label_17 = QtWidgets.QLabel(self.centralwidget)
        self.label_17.setGeometry(QtCore.QRect(530, 341, 311, 31))
        self.label_17.setObjectName("label_17")
        self.prm_min_size = QtWidgets.QTextBrowser(self.centralwidget)
        self.prm_min_size.setGeometry(QtCore.QRect(910, 369, 71, 25))
        self.prm_min_size.setReadOnly(False)
        self.prm_min_size.setObjectName("prm_min_size")
        self.prm_opt_tm = QtWidgets.QTextBrowser(self.centralwidget)
        self.prm_opt_tm.setGeometry(QtCore.QRect(909, 421, 71, 25))
        self.prm_opt_tm.setReadOnly(False)
        self.prm_opt_tm.setObjectName("prm_opt_tm")
        self.label_18 = QtWidgets.QLabel(self.centralwidget)
        self.label_18.setGeometry(QtCore.QRect(530, 419, 311, 31))
        self.label_18.setObjectName("label_18")
        self.label_19 = QtWidgets.QLabel(self.centralwidget)
        self.label_19.setGeometry(QtCore.QRect(530, 368, 181, 31))
        self.label_19.setObjectName("label_19")
        self.prm_max_size = QtWidgets.QTextBrowser(self.centralwidget)
        self.prm_max_size.setGeometry(QtCore.QRect(910, 395, 71, 25))
        self.prm_max_size.setReadOnly(False)
        self.prm_max_size.setObjectName("prm_max_size")
        self.label_20 = QtWidgets.QLabel(self.centralwidget)
        self.label_20.setGeometry(QtCore.QRect(530, 392, 311, 31))
        self.label_20.setObjectName("label_20")
        self.prm_min_tm = QtWidgets.QTextBrowser(self.centralwidget)
        self.prm_min_tm.setGeometry(QtCore.QRect(910, 446, 71, 25))
        self.prm_min_tm.setReadOnly(False)
        self.prm_min_tm.setObjectName("prm_min_tm")
        self.prm_tm_diff = QtWidgets.QTextBrowser(self.centralwidget)
        self.prm_tm_diff.setGeometry(QtCore.QRect(910, 496, 71, 25))
        self.prm_tm_diff.setReadOnly(False)
        self.prm_tm_diff.setObjectName("prm_tm_diff")
        self.label_21 = QtWidgets.QLabel(self.centralwidget)
        self.label_21.setGeometry(QtCore.QRect(530, 493, 311, 31))
        self.label_21.setObjectName("label_21")
        self.label_22 = QtWidgets.QLabel(self.centralwidget)
        self.label_22.setGeometry(QtCore.QRect(530, 445, 311, 31))
        self.label_22.setObjectName("label_22")
        self.prm_max_tm = QtWidgets.QTextBrowser(self.centralwidget)
        self.prm_max_tm.setGeometry(QtCore.QRect(910, 471, 71, 25))
        self.prm_max_tm.setReadOnly(False)
        self.prm_max_tm.setObjectName("prm_max_tm")
        self.label_23 = QtWidgets.QLabel(self.centralwidget)
        self.label_23.setGeometry(QtCore.QRect(530, 471, 311, 31))
        self.label_23.setObjectName("label_23")
        self.prm_opt_gc = QtWidgets.QTextBrowser(self.centralwidget)
        self.prm_opt_gc.setGeometry(QtCore.QRect(910, 521, 71, 25))
        self.prm_opt_gc.setReadOnly(False)
        self.prm_opt_gc.setObjectName("prm_opt_gc")
        self.prm_max_gc = QtWidgets.QTextBrowser(self.centralwidget)
        self.prm_max_gc.setGeometry(QtCore.QRect(910, 573, 71, 25))
        self.prm_max_gc.setReadOnly(False)
        self.prm_max_gc.setObjectName("prm_max_gc")
        self.label_24 = QtWidgets.QLabel(self.centralwidget)
        self.label_24.setGeometry(QtCore.QRect(530, 571, 311, 31))
        self.label_24.setObjectName("label_24")
        self.label_25 = QtWidgets.QLabel(self.centralwidget)
        self.label_25.setGeometry(QtCore.QRect(530, 520, 311, 31))
        self.label_25.setObjectName("label_25")
        self.prm_min_gc = QtWidgets.QTextBrowser(self.centralwidget)
        self.prm_min_gc.setGeometry(QtCore.QRect(910, 547, 71, 25))
        self.prm_min_gc.setReadOnly(False)
        self.prm_min_gc.setObjectName("prm_min_gc")
        self.label_26 = QtWidgets.QLabel(self.centralwidget)
        self.label_26.setGeometry(QtCore.QRect(530, 545, 321, 31))
        self.label_26.setObjectName("label_26")
        self.label_28 = QtWidgets.QLabel(self.centralwidget)
        self.label_28.setGeometry(QtCore.QRect(540, 0, 351, 21))
        self.label_28.setObjectName("label_28")
        self.about_button = QtWidgets.QPushButton(self.centralwidget)
        self.about_button.setGeometry(QtCore.QRect(1010, 550, 100, 31))
        self.about_button.setObjectName("about_button")
        self.label_29 = QtWidgets.QLabel(self.centralwidget)
        self.label_29.setGeometry(QtCore.QRect(1010, 0, 221, 31))
        self.label_29.setObjectName("label_29")
        self.line_15 = QtWidgets.QFrame(self.centralwidget)
        self.line_15.setGeometry(QtCore.QRect(1000, 310, 231, 20))
        self.line_15.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_15.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_15.setObjectName("line_15")
        self.label_30 = QtWidgets.QLabel(self.centralwidget)
        self.label_30.setGeometry(QtCore.QRect(1010, 320, 211, 31))
        self.label_30.setObjectName("label_30")
        self.line_16 = QtWidgets.QFrame(self.centralwidget)
        self.line_16.setGeometry(QtCore.QRect(1000, 430, 231, 20))
        self.line_16.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_16.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_16.setObjectName("line_16")
        self.auto_exit_flag = QtWidgets.QCheckBox(self.centralwidget)
        self.auto_exit_flag.setGeometry(QtCore.QRect(540, 130, 451, 31))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.auto_exit_flag.setFont(font)
        self.auto_exit_flag.setChecked(True)
        self.auto_exit_flag.setObjectName("auto_exit_flag")
        self.open_root = QtWidgets.QPushButton(self.centralwidget)
        self.open_root.setGeometry(QtCore.QRect(1119, 500, 111, 31))
        self.open_root.setObjectName("open_root")
        self.label_31 = QtWidgets.QLabel(self.centralwidget)
        self.label_31.setGeometry(QtCore.QRect(10, 301, 391, 41))
        self.label_31.setObjectName("label_31")
        self.lTag_flag = QtWidgets.QCheckBox(self.centralwidget)
        self.lTag_flag.setGeometry(QtCore.QRect(530, 630, 91, 41))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.lTag_flag.setFont(font)
        self.lTag_flag.setObjectName("lTag_flag")
        self.rTag_flag = QtWidgets.QCheckBox(self.centralwidget)
        self.rTag_flag.setGeometry(QtCore.QRect(770, 630, 81, 41))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.rTag_flag.setFont(font)
        self.rTag_flag.setObjectName("rTag_flag")
        self.lTag_seq = QtWidgets.QListWidget(self.centralwidget)
        self.lTag_seq.setGeometry(QtCore.QRect(620, 630, 131, 41))
        self.lTag_seq.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.lTag_seq.setObjectName("lTag_seq")
        item = QtWidgets.QListWidgetItem()
        self.lTag_seq.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.lTag_seq.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.lTag_seq.addItem(item)
        self.rTag_seq = QtWidgets.QListWidget(self.centralwidget)
        self.rTag_seq.setGeometry(QtCore.QRect(860, 628, 121, 41))
        self.rTag_seq.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.rTag_seq.setObjectName("rTag_seq")
        item = QtWidgets.QListWidgetItem()
        self.rTag_seq.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.rTag_seq.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.rTag_seq.addItem(item)
        self.max_imperfect = QtWidgets.QSpinBox(self.centralwidget)
        self.max_imperfect.setGeometry(QtCore.QRect(400, 366, 111, 22))
        self.max_imperfect.setMaximum(999999)
        self.max_imperfect.setProperty("value", 0)
        self.max_imperfect.setObjectName("max_imperfect")
        self.min_gap = QtWidgets.QSpinBox(self.centralwidget)
        self.min_gap.setGeometry(QtCore.QRect(400, 310, 111, 31))
        self.min_gap.setMaximum(999999)
        self.min_gap.setProperty("value", 0)
        self.min_gap.setObjectName("min_gap")
        self.left_flank_seq = QtWidgets.QSpinBox(self.centralwidget)
        self.left_flank_seq.setGeometry(QtCore.QRect(910, 23, 71, 22))
        self.left_flank_seq.setMaximum(999999)
        self.left_flank_seq.setProperty("value", 85)
        self.left_flank_seq.setObjectName("left_flank_seq")
        self.right_flank_seq = QtWidgets.QSpinBox(self.centralwidget)
        self.right_flank_seq.setGeometry(QtCore.QRect(910, 50, 71, 21))
        self.right_flank_seq.setMaximum(999999)
        self.right_flank_seq.setProperty("value", 85)
        self.right_flank_seq.setObjectName("right_flank_seq")
        self.min_unit = QtWidgets.QSpinBox(self.centralwidget)
        self.min_unit.setGeometry(QtCore.QRect(400, 162, 51, 31))
        self.min_unit.setMinimum(1)
        self.min_unit.setMaximum(30)
        self.min_unit.setProperty("value", 1)
        self.min_unit.setObjectName("min_unit")
        self.max_unit = QtWidgets.QSpinBox(self.centralwidget)
        self.max_unit.setGeometry(QtCore.QRect(460, 162, 51, 31))
        self.max_unit.setMinimum(1)
        self.max_unit.setMaximum(30)
        self.max_unit.setProperty("value", 6)
        self.max_unit.setObjectName("max_unit")
        self.min_fix = QtWidgets.QSpinBox(self.centralwidget)
        self.min_fix.setGeometry(QtCore.QRect(400, 197, 111, 31))
        self.min_fix.setMinimum(0)
        self.min_fix.setMaximum(9999)
        self.min_fix.setProperty("value", 0)
        self.min_fix.setObjectName("min_fix")
        self.line_18 = QtWidgets.QFrame(self.centralwidget)
        self.line_18.setGeometry(QtCore.QRect(1000, 440, 231, 20))
        self.line_18.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_18.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_18.setObjectName("line_18")
        self.console_screen_flag = QtWidgets.QCheckBox(self.centralwidget)
        self.console_screen_flag.setGeometry(QtCore.QRect(1010, 460, 221, 31))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.console_screen_flag.setFont(font)
        self.console_screen_flag.setChecked(True)
        self.console_screen_flag.setObjectName("console_screen_flag")
        self.myButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.myButton_4.setGeometry(QtCore.QRect(1119, 550, 111, 31))
        self.myButton_4.setObjectName("myButton_4")
        self.line_20 = QtWidgets.QFrame(self.centralwidget)
        self.line_20.setGeometry(QtCore.QRect(1010, 590, 221, 20))
        self.line_20.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_20.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_20.setObjectName("line_20")
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(1010, 610, 221, 61))
        self.textEdit.setObjectName("textEdit")
        self.line_5 = QtWidgets.QFrame(self.centralwidget)
        self.line_5.setGeometry(QtCore.QRect(0, 670, 1241, 20))
        self.line_5.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_5.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_5.setObjectName("line_5")
        self.sourceFileDig = QtWidgets.QPushButton(self.centralwidget)
        self.sourceFileDig.setGeometry(QtCore.QRect(470, 4, 41, 51))
        self.sourceFileDig.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.sourceFileDig.setObjectName("sourceFileDig")
        self.resultFileDig = QtWidgets.QPushButton(self.centralwidget)
        self.resultFileDig.setGeometry(QtCore.QRect(470, 60, 41, 51))
        self.resultFileDig.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.resultFileDig.setObjectName("resultFileDig")
        self.dictFileDig = QtWidgets.QPushButton(self.centralwidget)
        self.dictFileDig.setGeometry(QtCore.QRect(470, 610, 41, 51))
        self.dictFileDig.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.dictFileDig.setObjectName("dictFileDig")
        self.save_primer = QtWidgets.QTextEdit(self.centralwidget)
        self.save_primer.setGeometry(QtCore.QRect(680, 260, 261, 50))
        self.save_primer.setLineWrapMode(QtWidgets.QTextEdit.NoWrap)
        self.save_primer.setObjectName("save_primer")
        self.primer_saveDlg = QtWidgets.QPushButton(self.centralwidget)
        self.primer_saveDlg.setGeometry(QtCore.QRect(940, 260, 41, 50))
        self.primer_saveDlg.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.primer_saveDlg.setObjectName("primer_saveDlg")
        self.label_27 = QtWidgets.QLabel(self.centralwidget)
        self.label_27.setGeometry(QtCore.QRect(530, 595, 281, 31))
        self.label_27.setObjectName("label_27")
        self.prm_poly = QtWidgets.QTextBrowser(self.centralwidget)
        self.prm_poly.setGeometry(QtCore.QRect(910, 600, 71, 25))
        self.prm_poly.setReadOnly(False)
        self.prm_poly.setAcceptRichText(True)
        self.prm_poly.setObjectName("prm_poly")
        self.line_14 = QtWidgets.QFrame(self.centralwidget)
        self.line_14.setGeometry(QtCore.QRect(0, 680, 1241, 20))
        self.line_14.setAutoFillBackground(False)
        self.line_14.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_14.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_14.setObjectName("line_14")
        self.line_17 = QtWidgets.QFrame(self.centralwidget)
        self.line_17.setGeometry(QtCore.QRect(1230, 0, 20, 691))
        self.line_17.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_17.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_17.setObjectName("line_17")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1244, 26))
        self.menubar.setObjectName("menubar")
        self.menuClose = QtWidgets.QMenu(self.menubar)
        self.menuClose.setObjectName("menuClose")
        MainWindow.setMenuBar(self.menubar)
        self.statusBar = QtWidgets.QStatusBar(MainWindow)
        self.statusBar.setObjectName("statusBar")
        MainWindow.setStatusBar(self.statusBar)
        self.actionExit = QtWidgets.QAction(MainWindow)
        self.actionExit.setObjectName("actionExit")
        self.actionStartScan = QtWidgets.QAction(MainWindow)
        self.actionStartScan.setObjectName("actionStartScan")
        self.menuClose.addAction(self.actionExit)
        self.menuClose.addAction(self.actionStartScan)
        self.menubar.addAction(self.menuClose.menuAction())

        self.retranslateUi(MainWindow)
        self.output_format.setCurrentRow(0)
        self.motif_type.setCurrentRow(0)
        self.lTag_seq.setCurrentRow(0)
        self.rTag_seq.setCurrentRow(0)
        self.actionExit.triggered.connect(MainWindow.close)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "OSTRFPD ver 0.01"))
        self.log_window.setStatusTip(_translate("MainWindow", "Display section for log messages of recent task completion (For display in GUI mode only)"))
        self.log_window.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Arial\'; font-size:10pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-family:\'Ubuntu\'; font-size:6pt;\">Log data...</span></p></body></html>"))
        self.Start_Scan.setStatusTip(_translate("MainWindow", "Strats the main scan. Limited levels of error checks and warning messages will be given before scan starts. "))
        self.Start_Scan.setText(_translate("MainWindow", "Start Scan"))
        self.label.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:10pt;\">Input file:</span></p></body></html>"))
        self.input_file.setStatusTip(_translate("MainWindow", "The source sequence file single or multi-FASTA (.fasta, .fa .gz compressed FASTA are directly accepted). Files are recommended to be in default OSTRFPD folder"))
        self.input_file.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:7.5pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">input.fasta</span></p></body></html>"))
        self.label_2.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:10pt;\">Output file</span></p></body></html>"))
        self.output_file.setStatusTip(_translate("MainWindow", "The target output file (default name: output.txt). Recommended to use or set output results in default OSTRFPD folder. Please use correct output extension (.txt or .fasta)"))
        self.output_file.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:7.5pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">output.txt</span></p></body></html>"))
        self.DNA_button.setStatusTip(_translate("MainWindow", "Source type: DNA ( supports upto 6 motif in accurate match, and 10 in fast match ). <-scan dna>"))
        self.DNA_button.setText(_translate("MainWindow", "DNA"))
        self.RNA_button.setStatusTip(_translate("MainWindow", "Source type: RNA (supports upto 6 motif in accurate match, and 10 in fast match). <-scan rna>"))
        self.RNA_button.setText(_translate("MainWindow", "RNA"))
        self.Protein_button.setStatusTip(_translate("MainWindow", "Source type: Protein (supported maximum of 3 unit length motif ). <-scan protein>"))
        self.Protein_button.setText(_translate("MainWindow", "Protein"))
        self.PrimerFlag.setStatusTip(_translate("MainWindow", "Make output result file \"primer_result.txt\" in default OSTRFPD folder. <-primer true>"))
        self.PrimerFlag.setText(_translate("MainWindow", "Make Primer"))
        self.output_format.setStatusTip(_translate("MainWindow", "Selection of OSTRFPD microsatellite results OUTPUT file types. Default is OSTRFPD tab-delimited text file. See documentations for details. <-fasta false> <-imalign false><-align false>"))
        __sortingEnabled = self.output_format.isSortingEnabled()
        self.output_format.setSortingEnabled(False)
        item = self.output_format.item(0)
        item.setText(_translate("MainWindow", "Default"))
        item = self.output_format.item(1)
        item.setText(_translate("MainWindow", "FASTA"))
        item = self.output_format.item(2)
        item.setText(_translate("MainWindow", "Alignment"))
        item = self.output_format.item(3)
        item.setText(_translate("MainWindow", "Imperfect Alignment"))
        self.output_format.setSortingEnabled(__sortingEnabled)
        self.label_3.setStatusTip(_translate("MainWindow", "Note: For dictionary mode, only single fixed unit motif length is allowed (maximum 100 bp, default 8).  For other options, either 1-max or fixed unit motif length (min=max) range is allowed."))
        self.label_3.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:9pt;\">Motif length (min-max)</span></p></body></html>"))
        self.label_4.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:9pt;\">Minimum repeat number</span></p></body></html>"))
        self.fsc_string.setStatusTip(_translate("MainWindow", "Positive integers in format m,n. Filters out the microsatellites if a minimum of \'m\' unit motif length tandem repeat of  minimum \'n\' repeat  is found in either Left or Right flanking sequence. <-fsc 1,6>"))
        self.fsc_string.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:7.5pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:8pt;\"><br /></p></body></html>"))
        self.label_5.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:9pt;\">MISA formatted repeat</span></p></body></html>"))
        self.misa_string.setStatusTip(_translate("MainWindow", "MISA-formatted string for minimum repeat (copy) numbers [n1,n2,n3..., n] for corresponding motif lengths starting from 1 to m [1,2,3…m]. < -misa 14,7,5,4,4,4 >"))
        self.misa_string.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:7.5pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">14,7,5,4,4,4</span></p></body></html>"))
        self.label_6.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:9pt;\">Flanking sequence filter [Usage e.g.: 1,6]</span></p></body></html>"))
        self.label_7.setStatusTip(_translate("MainWindow", "General settings specific to Imperfect repeats. See documentation for further details "))
        self.label_7.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:10pt; text-decoration: underline;\">Imperfect repeats</span></p></body></html>"))
        self.label_8.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:9pt;\">Maximum imperfect length (aa | bp)</span></p></body></html>"))
        self.label_9.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:9pt;\">Minimum perfection thresthold (%)</span></p></body></html>"))
        self.min_perfection.setStatusTip(_translate("MainWindow", "Set the minimum similarity threshold (in percentage) for the results to be accepted on top of other selection criteria supplied. <e.g.: -sim 50>"))
        self.strict_flag.setStatusTip(_translate("MainWindow", "Activates Strict mode. Ignores non-seed (aa | bp) contaning imperfect microsatellites even if the non-seed mismatch occured within pre-declared imperfection range. Default status is OFF. <-exclude false>"))
        self.strict_flag.setText(_translate("MainWindow", "Exclude non-seed mismatch (strict mode)"))
        self.sshow_flag.setStatusTip(_translate("MainWindow", "Sets the display output ON/OFF for the scoring matrix on console screen or terminal during scan (has no effect on output result file). <e.g.: -sshow false>"))
        self.sshow_flag.setText(_translate("MainWindow", "Show each score in console output"))
        self.label_10.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:9pt;\">Imperfection start penalty</span></p></body></html>"))
        self.missmatch_open.setStatusTip(_translate("MainWindow", "Input type: positive integer. Penalty score which is applied only once for the first (starting mismatch) occurrence to a given imperfect micorsatellite. < e.g.:  -mop 2 >"))
        self.label_11.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:9pt;\">Non-seed mismatch start penalty</span></p></body></html>"))
        self.non_seed_strat_penalty.setStatusTip(_translate("MainWindow", "Panalty score for the first non-seed mismatch occurancance added only once for an imperfect microsatellite independently on top of other settings.<e.g.:  -imop 3>"))
        self.missmatch_extension_penalty.setStatusTip(_translate("MainWindow", "Input type: positive integer. Set the penalty for each mismatch (seed or non-seed type). It is added on top of mismatch starting penalties (if present).<e.g.: -mmp 1>"))
        self.label_12.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:9pt;\">Mismatch extension penalty</span></p></body></html>"))
        self.default_eng.setStatusTip(_translate("MainWindow", "Set the unit motif sequence generator engine type to ‘Fast mode’ which relatively speeds up the scan for common microsatellite unit motifs. <e.g.: -eng false>"))
        self.default_eng.setText(_translate("MainWindow", "Use fast (less accurate) motif sequence generator"))
        self.accurate_eng.setStatusTip(_translate("MainWindow", "Set the unit motif sequence generator engine type to ‘Accurate mode’ which is relatively slow but can scan for more microsatellite unit motifs. <e.g.: -eng false>"))
        self.accurate_eng.setText(_translate("MainWindow", "Use accurate (relatively slow) motif sequence generator"))
        self.dict_mode.setStatusTip(_translate("MainWindow", "Sets the dictionary file for custom unit motif sequence search, which will only scan for unit motifs (listed in the dictionay file), in range supplied by the user. <-dict dict_file>"))
        self.dict_mode.setText(_translate("MainWindow", "Dictionary mode"))
        self.dict_string.setStatusTip(_translate("MainWindow", "Sets the dictionary file for supplying custom unit motif sequences [Usage:  -dict filename]. If used, the dictionary file (e.g. dict_dna.txt) will be checked and only the unit motifs listed in the file will be searched."))
        self.dict_string.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:7.5pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">dict_dna.txt</span></p></body></html>"))
        self.left_flanking_flag.setStatusTip(_translate("MainWindow", "Extract the indicated length (bp|aa) of left flanking sequence"))
        self.left_flanking_flag.setText(_translate("MainWindow", "Extract left flanking seq  (aa | bp)"))
        self.right_flanking_flag.setStatusTip(_translate("MainWindow", "Extract the indicated length (bp|aa) of right flanking sequence"))
        self.right_flanking_flag.setText(_translate("MainWindow", "Extract right flanking seq (aa | bp)"))
        self.rev_comp_flag.setStatusTip(_translate("MainWindow", "Attaches the reverse complement sequence for DNA or RNA repeats inlcuding flanking sequences. <-rcomp false>"))
        self.rev_comp_flag.setText(_translate("MainWindow", "Add reverse complement to output"))
        self.stat_flag.setStatusTip(_translate("MainWindow", "Attach built header and basic statistics report at end of the output file (applicable for OSTRFPD default format only). <e.g.: -report true>"))
        self.stat_flag.setText(_translate("MainWindow", "DO NOT attach built informations and statistics"))
        self.show_console.setStatusTip(_translate("MainWindow", "Hides the result of indivisual microsatellite on console or terminal (has no effect on output result file). <e.g.: -sdout false>"))
        self.show_console.setText(_translate("MainWindow", "DO NOT show each result in console"))
        self.label_13.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:9pt;\">Motif standardization</span></p></body></html>"))
        self.motif_type.setStatusTip(_translate("MainWindow", "Partial or Full standardization of the unit motif (seed) sequence for display and report file. Default is Full standardization. See OSTRFPD manuscript/paper for details. <e.g.: -std true>"))
        __sortingEnabled = self.motif_type.isSortingEnabled()
        self.motif_type.setSortingEnabled(False)
        item = self.motif_type.item(0)
        item.setText(_translate("MainWindow", "Full:[rev.complement + cyclic]"))
        item = self.motif_type.item(1)
        item.setText(_translate("MainWindow", "Partial:[cyclic only]"))
        self.motif_type.setSortingEnabled(__sortingEnabled)
        self.label_14.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:9pt;\">Primer size range (min-max) in bp</span></p></body></html>"))
        self.prm_range.setStatusTip(_translate("MainWindow", "Used to set the minimum and maximum (min-max) range (in bp) of the output primers product (amplicon). Default values is 150-300. <e.g.: -prng 150-300>"))
        self.prm_range.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:7.5pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">150-300</span></p></body></html>"))
        self.label_15.setStatusTip(_translate("MainWindow", "Basic settings for automated microsatellite-targeted Primer design using Priemr3 Platform."))
        self.label_15.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:10pt; text-decoration: underline;\">Primer3 settings</span></p></body></html>"))
        self.label_16.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:9pt;\">Primer result file</span></p></body></html>"))
        self.prm_opt_size.setStatusTip(_translate("MainWindow", "Used to set the optimum primer length (in Bp). Default value is 20.<e.g.: -posz 20>"))
        self.prm_opt_size.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:7.5pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">20</span></p></body></html>"))
        self.label_17.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:9pt;\">Primer optimum size </span></p></body></html>"))
        self.prm_min_size.setStatusTip(_translate("MainWindow", " Used to set the minimum primer length (in Bp). Default value is 17. <e.g.:  -pmisz 17>"))
        self.prm_min_size.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:7.5pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">17</span></p></body></html>"))
        self.prm_opt_tm.setStatusTip(_translate("MainWindow", "Used to set the optimum primer Tm (°C). Default value is 60. <e.g.:  -potm 60>"))
        self.prm_opt_tm.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:7.5pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">60</span></p></body></html>"))
        self.label_18.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:9pt;\">Primer optimum T</span><span style=\" font-size:9pt; vertical-align:sub;\">m </span><span style=\" font-size:9pt;\">(</span><span style=\" font-weight:600;\">°</span><span style=\" font-size:9pt;\">C)</span></p></body></html>"))
        self.label_19.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:9pt;\">Primer minimum size</span></p></body></html>"))
        self.prm_max_size.setStatusTip(_translate("MainWindow", "Used to set the maximum primer length (in Bp). Default value is 26. <e.g.: -pmxsz  26>"))
        self.prm_max_size.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:7.5pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">26</span></p></body></html>"))
        self.label_20.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:9pt;\">Primer maximum size</span></p></body></html>"))
        self.prm_min_tm.setStatusTip(_translate("MainWindow", "Sets the minimum primer Tm (C). Default is 58. <e.g.:  -pmitm 58>"))
        self.prm_min_tm.setAccessibleDescription(_translate("MainWindow", "Used to set the minimum primer Tm (C). Default value is 58."))
        self.prm_min_tm.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:7.5pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">58</span></p></body></html>"))
        self.prm_tm_diff.setStatusTip(_translate("MainWindow", "Used to set the maximum primer Tm (C) difference. Default value is 6. <e.g.:  -ptmdiff  6>"))
        self.prm_tm_diff.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:7.5pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">6</span></p></body></html>"))
        self.label_21.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:9pt;\">Primer maximum T</span><span style=\" font-size:9pt; vertical-align:sub;\">m</span><span style=\" font-size:9pt;\"> difference (</span><span style=\" font-weight:600;\">°</span><span style=\" font-size:9pt;\">C)</span></p></body></html>"))
        self.label_22.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:9pt;\">Primer minimum T</span><span style=\" font-size:9pt; vertical-align:sub;\">m </span><span style=\" font-size:9pt;\">(</span><span style=\" font-weight:600;\">°</span><span style=\" font-size:9pt;\">C)</span></p></body></html>"))
        self.prm_max_tm.setStatusTip(_translate("MainWindow", "Sets the maximum primer Tm(C). Default is 63. <e.g.:  -pmxtm 63>"))
        self.prm_max_tm.setAccessibleDescription(_translate("MainWindow", "Used to set the maximum primer Tm (C).Default is 63"))
        self.prm_max_tm.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:7.5pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">63</span></p></body></html>"))
        self.label_23.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:9pt;\">Primer maximum T</span><span style=\" font-size:9pt; vertical-align:sub;\">m </span><span style=\" font-size:9pt;\">(</span><span style=\" font-weight:600;\">°</span><span style=\" font-size:9pt;\">C)</span></p></body></html>"))
        self.prm_opt_gc.setStatusTip(_translate("MainWindow", "Used to set the optimum GC content. Default value is 55.<e.g.:  -pogc 55>"))
        self.prm_opt_gc.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:7.5pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">55</span></p></body></html>"))
        self.prm_max_gc.setStatusTip(_translate("MainWindow", "Used to set the maximum GC content in percentage. Default is 80. <e.g.: -pmxgc 80 > "))
        self.prm_max_gc.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:7.5pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">80</span></p></body></html>"))
        self.label_24.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:9pt;\">Primer maximum G+C content (%)</span></p></body></html>"))
        self.label_25.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:9pt;\">Primer optimum G+C content (%)</span></p></body></html>"))
        self.prm_min_gc.setStatusTip(_translate("MainWindow", "Used to set the minimum GC content in percentage. Default is 20. <e.g.: -pmigc 20> "))
        self.prm_min_gc.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:7.5pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">20</span></p></body></html>"))
        self.label_26.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:9pt;\">Primer minimum G+C content (%)</span></p></body></html>"))
        self.label_28.setStatusTip(_translate("MainWindow", "Settings for Flanking sequences"))
        self.label_28.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:10pt; text-decoration: underline;\">Flanking sequence and display options</span></p></body></html>"))
        self.about_button.setStatusTip(_translate("MainWindow", "(O)mni (S)hort (T)andem (R)epeat (F)inder & (P)rimer (D)esigner: OSTRFPD Version 0.01. Developed by Mathema VB, Dondorp AM, Imwong M (2019)"))
        self.about_button.setText(_translate("MainWindow", "About"))
        self.label_29.setStatusTip(_translate("MainWindow", "Logs messages for recent activities"))
        self.label_29.setText(_translate("MainWindow", "<html><head/><body><p>Log screen for recent activities</p></body></html>"))
        self.label_30.setStatusTip(_translate("MainWindow", "Section for OUTPUT format selection of the scan results"))
        self.label_30.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:9pt; text-decoration: underline;\">Output format</span></p></body></html>"))
        self.auto_exit_flag.setStatusTip(_translate("MainWindow", "Prevents auto colsing of consol window after finishing scan. Suitable for batch operation (for windows OS). <e.g.: -autoexit false>"))
        self.auto_exit_flag.setText(_translate("MainWindow", "DO NOT auto-exit console"))
        self.open_root.setStatusTip(_translate("MainWindow", "Open the current OSTRFPD directory where ostrfpd source code is located. (in GUI mode only)"))
        self.open_root.setText(_translate("MainWindow", "OSTRFPD Root"))
        self.label_31.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:9pt;\">Minimum gap (aa | bp)</span></p></body></html>"))
        self.lTag_flag.setStatusTip(_translate("MainWindow", "Check to insert the Left primer tag. <e.g.: -ltag 6FAM->"))
        self.lTag_flag.setText(_translate("MainWindow", "Left  tag"))
        self.rTag_flag.setStatusTip(_translate("MainWindow", "Check to insert the Right primer tag. <e.g.: -rtag gtgctt->"))
        self.rTag_flag.setText(_translate("MainWindow", "Right tag"))
        self.lTag_seq.setStatusTip(_translate("MainWindow", "Set the Left primer Tag. Default selection is  \"6FAM-\""))
        __sortingEnabled = self.lTag_seq.isSortingEnabled()
        self.lTag_seq.setSortingEnabled(False)
        item = self.lTag_seq.item(0)
        item.setText(_translate("MainWindow", "6FAM-"))
        item = self.lTag_seq.item(1)
        item.setText(_translate("MainWindow", "HEX-"))
        item = self.lTag_seq.item(2)
        item.setText(_translate("MainWindow", "gtgtctt-"))
        self.lTag_seq.setSortingEnabled(__sortingEnabled)
        self.rTag_seq.setStatusTip(_translate("MainWindow", "Set the Left primer Tag. Default selection is  \"gtgtctt-\" "))
        __sortingEnabled = self.rTag_seq.isSortingEnabled()
        self.rTag_seq.setSortingEnabled(False)
        item = self.rTag_seq.item(0)
        item.setText(_translate("MainWindow", "gtgtctt-"))
        item = self.rTag_seq.item(1)
        item.setText(_translate("MainWindow", "HEX-"))
        item = self.rTag_seq.item(2)
        item.setText(_translate("MainWindow", "6FAM-"))
        self.rTag_seq.setSortingEnabled(__sortingEnabled)
        self.max_imperfect.setStatusTip(_translate("MainWindow", "The maximum distance (aa | bp) within which the mismatch containing microsatellites but with same motif (seed) will be combined as single imperfect microsatellite. <e.g.: -imperfect 0>"))
        self.min_gap.setStatusTip(_translate("MainWindow", "Declare minimum gaps (in bp) between two consecutive repeat motifs. Please note that all consecutive repeats identified within the range will be discarded even if it belongs to same motif type. <e.g.: -gap 0>"))
        self.left_flank_seq.setStatusTip(_translate("MainWindow", "Include indicated length of  Left flanking sequence ( aa | bp ). <e.g.: -lflank 85>"))
        self.right_flank_seq.setStatusTip(_translate("MainWindow", "Include indicated length of  Right flanking sequence ( aa | bp ). <e.g.: -rflank 85>"))
        self.min_unit.setStatusTip(_translate("MainWindow", "Minimum unit motif length (Range are auto limited for Fastm, Accurate and Dictionary mode). <semi-auto range selection in GUI mode only>"))
        self.max_unit.setStatusTip(_translate("MainWindow", "Maximum unit motif length (Limits for unit motif length are automatically set for Fast, Accurate and dictionary search in GUI Mode only). <e.g.:-unit 6 >"))
        self.min_fix.setStatusTip(_translate("MainWindow", "Minimum repeat (copy) number. Will overwrite MISA settings if applied. <-min 0><-fix false> "))
        self.console_screen_flag.setStatusTip(_translate("MainWindow", "Clears the terminal or consol on scan start (for GUI mode and display purpose only). "))
        self.console_screen_flag.setText(_translate("MainWindow", "Clear terminal on scan start"))
        self.myButton_4.setStatusTip(_translate("MainWindow", "Exits the OSTRFPD program."))
        self.myButton_4.setText(_translate("MainWindow", "Exit"))
        self.textEdit.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:7.5pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:6pt; font-weight:600;\">OSTRFPD  v0.01  </span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:6pt;\">Developed by: </span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:6pt; font-style:italic;\">&lt;Mathema VB, Dondorp AM, Imwong M (2019)&gt;, </span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:6pt; font-style:italic;\">&lt;Category: Bioinformatics tool&gt;</span></p>\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:6pt;\">Microsatellite Search and Primer Designer</span></p></body></html>"))
        self.sourceFileDig.setStatusTip(_translate("MainWindow", "Click to open source FASTA file. <e.g.: -input filename>"))
        self.sourceFileDig.setText(_translate("MainWindow", "..."))
        self.resultFileDig.setStatusTip(_translate("MainWindow", "Click to save the output result file. <e.g.: -output filename>"))
        self.resultFileDig.setText(_translate("MainWindow", "..."))
        self.dictFileDig.setStatusTip(_translate("MainWindow", "Click to select the dictionary file. <e.g.: -dict fict_dna.txt >"))
        self.dictFileDig.setText(_translate("MainWindow", "..."))
        self.save_primer.setStatusTip(_translate("MainWindow", "Save the primer output file. By default the file is saved to OSTRFPD folder with filename \"primer_results.txt\". <e.g.: -pfname primer_filename>"))
        self.save_primer.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:7.5pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">primer_result.txt</span></p></body></html>"))
        self.primer_saveDlg.setStatusTip(_translate("MainWindow", "Click to see the dialogue box to save the output result file of primer design. <e.g.:  -pfname primer_filename>"))
        self.primer_saveDlg.setText(_translate("MainWindow", "..."))
        self.label_27.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:9pt;\">Primer maximum Poly-X\'s</span></p></body></html>"))
        self.prm_poly.setStatusTip(_translate("MainWindow", "Used to set the maximum Poly-X\'s allowed in output primer . Default value is 3. <e.g.: -pmpoly 3>"))
        self.prm_poly.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:7.5pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:8pt;\">3</span></p></body></html>"))
        self.menuClose.setTitle(_translate("MainWindow", "Menu"))
        self.actionExit.setText(_translate("MainWindow", "Exit"))
        self.actionStartScan.setText(_translate("MainWindow", "StartScan"))

